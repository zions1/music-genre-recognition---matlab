crossValidate.m:	legend('Training RR', 'Validating RR', 'location', 'northOutside', 'orientation', 'horizontal');
decisionBoundaryPlot.m:	pointH=dsScatterPlot(DS, struct('showLegend', 1, 'showAnnotation', 0));	% Do not show legend now
decisionBoundaryPlot.m:% ====== How to show legend now using the right line objects?
detGet.m:	legend('data1 (negative data)', 'data2 (positive data)', sprintf('\\theta=%f\n', th), 'location', 'NorthEast'); grid on
detGet.m:	legend('n_1g_1', 'n_2g_2', 'abs(n_1g_1-n_2g_2)', sprintf('\\theta=%f\n', th), 'location', 'NorthEast'); grid on
detGet.m:	legend('n_1g_1/(n_1g_1+n_2g_2)', 'n_2g_2/(n_1g_1+n_2g_2)', 'abs diff', sprintf('\\theta=%f\n', th), 'location', 'NorthEast'); grid on
detGet.m:	legend('FN', 'FP', 'FN+FP', sprintf('\\theta=%f\n', th), 'location', 'NorthEast');
dsProjPlot1.m:					legendH=legend(DS.outputName, 'location', 'northOutside', 'orientation', 'horizontal');
dsProjPlot1.m:% ====== Adjust subplot according to the one with legend
dsProjPlot1.m:% ====== Put legend to the center
dsProjPlot1.m:	legendPos=get(legendH, 'pos');
dsProjPlot1.m:	legendPos(1)=(1-legendPos(3))/2;
dsProjPlot1.m:	legendPos(2)=1-legendPos(4)-0.01;
dsProjPlot1.m:	set(legendH, 'pos', legendPos);
dsProjPlot2.m:					legendH=legend(DS.outputName, 'location', 'northOutside', 'orientation', 'horizontal');
dsProjPlot2.m:% ====== Put legend to the center
dsProjPlot2.m:	legendPos=get(legendH, 'pos');
dsProjPlot2.m:	legendPos(1)=(1-legendPos(3))/2;
dsProjPlot2.m:	legendPos(2)=1-legendPos(4)-0.01;
dsProjPlot2.m:	set(legendH, 'pos', legendPos);
dsProjPlot3.m:					legendH=legend(DS.outputName, 'location', 'northOutside', 'orientation', 'horizontal');
dsProjPlot3.m:% ====== Put legend to the center
dsProjPlot3.m:	legendPos=get(legendH, 'pos');
dsProjPlot3.m:	legendPos(1)=(1-legendPos(3))/2;
dsProjPlot3.m:	legendPos(2)=1-legendPos(4)-0.01;
dsProjPlot3.m:	set(legendH, 'pos', legendPos);
dsScatterPlot.m:%		dsScatterPlot(DS, opt) use the info in opt to show annotation or legend. 
dsScatterPlot.m:%			opt.showLegend: 1 to show the legend is shown.
dsScatterPlot.m:		legend(pointH, DS.outputName, 'location', 'northOutside', 'orientation', 'horizontal');
dtwBridgePlot.m:        legend({'vec1', 'vec2'});
dtwBridgePlot.m:        legend({'vec1', 'vec2'});
endPointDetect.m:		ylabel('Volume & HOD'); title('Volume & HOD'); legend('Volume', 'HOD');
frameZeroMean.m:	legend('Original frame', 'Trend by polyfit', 'Modified frame');
getColor.m:%		legend('Color 1', 'Color 2', 'Color 3', 'Color 4', 'Color 5', 'Color 6');
getTriFilterPrm.m:	legend('Left indices', 'Center indices', 'Right indices', 'Location', 'NorthWest');
gmmcGaussianNumEstimate.m:	legend({'Inside test', 'Outside test'}, 'location', 'southeast');
gmmGaussianNumEstimate.m:	legend('Training log likelihood', 'Test log likelihood', 'Location', 'SouthEast');
gmmTrainDemo1d.m:legend([h1 h2 h3], 'g_i', 'w_ig_i', '\Sigma_i w_ig_i');
hmmEval.m:	subplot(5,1,2); plot((1:frameNum)', stateProb); legend('SU', 'V'); set(gca, 'xlim', [-inf inf]);
hmmEval.m:	subplot(5,1,3); plot(1:frameNum, optPath, 'k.-'); legend('Predcited'); set(gca, 'xlim', [-inf inf]);
initfknn.m:legend('Sample data: Class 1', 'Sample data: Class 2',...
interpViaDistance.m:%		legend('Sample data', 'Interpolated curve', 'Location', 'SouthEast');
interpViaGaussian.m:%		legend('Sample data', 'Interpolated curve', 'Location', 'SouthEast');
ldaFuzzy.m:legend('Class 1', 'Class 2', 'Class 3');
ldaFuzzy.m:legend('Class 1', 'Class 2', 'Class 3');
ldaPerfViaKnncLoo.m:%		legend('mode=''approximate''', 'mode=''exact''', 'location', 'southwest');
ldaPerfViaKnncLoo.m:%		legend('approximate mode, w/o input normalization', 'approximate mode, w/ input normalization', 'exact mode, w/o input normalization', 'exact mode, w/ input normalization', 'location', 'southwest');
oneCircleFit.m:	legend('Sample data', 'Circle by LSE');
oneCircleFit.m:		legend('Sample data', 'Circle by LSE', 'Circle by LSE+fminsearch');
pcaPerfViaKnncLoo.m:%		legend('Without input normalization', 'With input normalization', 'location', 'southwest');
perfCv.m:	legend('Training RR', 'Validating RR', 'location', 'northOutside', 'orientation', 'horizontal');
perfCv4classifier.m:	legend(opt.inputFunctions, 'location', 'northOutside', 'orientation', 'horizontal');
perfCv4classifier.m:	legend(opt.inputFunctions, 'location', 'northOutside', 'orientation', 'horizontal');
perfLoo4lse.m:	legend('Training RMSE', 'Test RMSE', 'location', 'northOutside', 'orientation', 'horizontal');
simSequence.m:	legend([computedH(1), gtH(1)], 'Computed', 'GT');
